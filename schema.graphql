type Dispatcher @entity {
  id: ID! #tokenId
  dispatcher: Bytes! # address
}

type Post @entity {
  id: ID! #tokenId
  pubId: ID! #publicationId
  contentURI: String! #content
  collectModule: Bytes! #collect address
  referenceModule: Bytes! #rm address
  referenceModuleReturn: Bytes! #abi encoded reference
  creationTime: Int! #timestamp
}

type Comment @entity {
  id: ID! #tokenId
  pubId: ID! #publicationId
  contentURI: String! #content
  profileIdPointed: ID! #pointedId
  pubIdPointed: ID! #pointed pub
  referenceModule: Bytes! #rm address
  referenceModuleReturn: Bytes! #abi encoded reference
  creationTime: Int! #timestamp
}

type Mirror @entity {
  id: ID! #tokenId
  pubId: ID! #publicationId
  contentURI: String! #content
  profileIdPointed: ID! #pointedId
  pubIdPointed: ID! #pointed pub
  referenceModule: Bytes! #rm address
  referenceModuleReturn: Bytes! #abi encoded reference
  creationTime: Int! #timestamp
}

type Publication @entity {
  id: ID!
  pubId: ID!
  referenceModule: Bytes!
  referenceModuleReturnData: Bytes
  timestamp: BigInt!
}

type Profile @entity {
  id: ID!
  name: String
  bio: String
  followNftAddress: String
  metadata: String
  handle: String!
  onwnedBy: String!
  isDefault: Boolean!
  isFollowedByMe: Boolean!
}

type EIP712Signature @entity {
  id: ID!
  v: Int!
  r: Int!
  s: Int!
  deadline: Int!
}

type MirrorWithSigData @entity {
  id: ID!
  profileId: ID!
  profileIdPointed: Int!
  pubIdPointed: Int!
  referenceModule: Bytes!
  referenceModuleData: Bytes!
  sig: EIP712Signature!
}

type CreateProfileData @entity {
  id: ID!
  to: Bytes!
  handle: String!
  imageURI: String!
  followModule: Bytes
  followModuleData: Bytes
  followNftURI: String
}